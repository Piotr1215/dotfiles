#!/usr/bin/env python3

import sys
import json
import os
from datetime import datetime
import subprocess

# Read the original and modified task from stdin
original_task_json = sys.stdin.readline().strip()
modified_task_json = sys.stdin.readline().strip()

# Parse the JSON
original_task = json.loads(original_task_json)
modified_task = json.loads(modified_task_json)

# Temp file to store the start time and reminder PID
temp_file_path = f"/tmp/task_data_{original_task['uuid']}.json"

# Function to convert ISO duration to minutes
def iso_duration_to_minutes(iso_duration):
    hours, minutes = 0, 0
    if 'H' in iso_duration:
        hours = int(iso_duration[2:-1].split('H')[0])
        remaining = iso_duration.split('H')[1]
        if remaining:
            minutes = int(remaining[:-1])
    elif 'M' in iso_duration:
        minutes = int(iso_duration[2:-1])
    return hours * 60 + minutes

# Function to convert minutes to ISO duration
def minutes_to_iso_duration(minutes):
    hours = minutes // 60
    remaining_minutes = minutes % 60
    return f"PT{hours}H{remaining_minutes}M" if hours else f"PT{remaining_minutes}M"

# Function to invoke the reminder script
def set_reminder(description, duration_minutes):
    hours = duration_minutes // 60
    minutes = duration_minutes % 60
    duration_string = f"{hours}h{minutes}m" if hours else f"{minutes}m"
    command = f"__reminder.sh 'Task Reminder: {description}' {duration_string}"
    try:
        process = subprocess.Popen(command, shell=True)
        return process.pid  # Return the process ID of the reminder
    except Exception as e:
        print(f"Failed to set reminder: {str(e)}")
        return None

# Function to cancel the reminder
def cancel_reminder(reminder_pid):
    command = f"atrm {reminder_pid}"
    result = subprocess.run(command, shell=True, capture_output=True, text=True)
    if result.returncode != 0:
        print(f"Failed to cancel reminder: {result.stderr}")

if 'start' in modified_task and 'start' not in original_task:
    # Task is started
    # Store the start time and reminder PID in a temp file
    reminder_pid = set_reminder(modified_task.get('description', 'No description'), iso_duration_to_minutes(modified_task['duration']))
    if reminder_pid is not None:
        with open(temp_file_path, 'w') as f:
            json.dump({"start_time": datetime.utcnow().isoformat(), "reminder_pid": reminder_pid}, f)
elif 'start' not in modified_task and 'start' in original_task:
    # Task is stopped
    # Read the start time and reminder PID from the temp file if it exists
    if os.path.exists(temp_file_path):
        with open(temp_file_path, 'r') as f:
            task_data = json.load(f)
        start_time = datetime.fromisoformat(task_data['start_time'])
        reminder_pid = task_data.get('reminder_pid')
        
        # Calculate elapsed time
        elapsed_time = datetime.utcnow() - start_time
        elapsed_minutes = int(elapsed_time.total_seconds() / 60)
        
        # If duration is specified
        if 'duration' in modified_task:
            estimated_minutes = iso_duration_to_minutes(modified_task['duration'])
            
            # Check if elapsed time exceeds or equals estimated time
            if elapsed_minutes >= estimated_minutes:
                extra_time = elapsed_minutes - estimated_minutes
                annotation = f"Exceeded estimated time by {extra_time} minutes." if extra_time > 0 else "Used up all estimated time."
                if 'annotations' in modified_task:
                    modified_task['annotations'].append({"description": annotation})
                else:
                    modified_task['annotations'] = [{"description": annotation}]
            
            # Subtract elapsed time from estimated time
            remaining_minutes = max(0, estimated_minutes - elapsed_minutes)
            modified_task['duration'] = minutes_to_iso_duration(remaining_minutes)
        
        # Cancel the reminder
        if reminder_pid is not None:
            cancel_reminder(reminder_pid)
        
        # Delete the temp file
        os.remove(temp_file_path)

# Output the modified task as JSON
print(json.dumps(modified_task))

# Exit without error
sys.exit(0)
