#!/usr/bin/env -S just --justfile
set export
set shell := ["bash", "-uc"]

yaml    := justfile_directory() + "/yaml"

browse      := if os() == "linux" { "xdg-open "} else { "open" }
copy        := if os() == "linux" { "xsel -ib"} else { "pbcopy" }

export gcp_provider_version         := env_var_or_default('GCP_PROVIDER', "v0.35.0")
export azure_provider_version       := env_var_or_default('AZURE_PROVIDER', "v0.36.0")
export aws_provider_version         := "v0.40~.0"
export random_suffix                := `echo $RANDOM`
export base64encoded_azure_creds    := `base64 ~/crossplane-azure-provider-key.json | tr -d "\n"`
export base64encoded_gcp_creds      := `base64 ~/gcp-creds-platform.json | tr -d "\n"`
export base64encoded_aws_creds      := `cat ~/.aws/credentials | grep -i 609897127049_AdministratorAccess -A3 | sed 's/609897127049_AdministratorAccess/default/' | base64 | tr -d "\n"`
export gcp_project_id               := "squad-platform-playground"
                                    
# this list of available targets
# targets marked with * are main targets
default:
  @just --list --unsorted

_check_mandatory_programs:
  @if ! type "kind" > /dev/null ;then echo "Please install KIND" && exit 1; fi
  @if ! type "kubectl" > /dev/null; then echo "Please install kubectl" && exit 1; fi
 
# * setup kind cluster with ArgoCD, kubernetes and help providers
setup_infra: _check_mandatory_programs setup_kind setup_k8s setup_helm enable_metrics_server

# enable metrics server
enable_metrics_server:
 @kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
 @kubectl patch deployment metrics-server -n kube-system \
  --type='json' \
  -p='[{"op": "add", "path": "/spec/template/spec/containers/0/args/-", "value": "--kubelet-insecure-tls=true"}]'

# disable metrics server
disable_metrics_server:
 @kubectl delete -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

# setup kind cluster with Crossplane and composition functions
setup_kind_xfn:
  #!/usr/bin/env bash
  echo "Creating kind cluster and Installing Crossplane"
  set -euo pipefail

  cluster="control-plane"

  echo "Creating kind cluster - ${cluster}"
  kind create cluster --config=kind-config.yaml --wait 3m 
  kind get kubeconfig --name "${cluster}"
  kubectl config use-context kind-"${cluster}"

  echo "Installing Crossplane with composition functions enabled"
  helm install crossplane --namespace crossplane-system crossplane-stable/crossplane \
      --create-namespace \
      --set "args={--debug,--enable-composition-functions}" \
      --set "xfn.enabled=true" \
      --set "xfn.args={--debug}"

# Check if crossplane composition functions installed properly
check_xfn:
   @echo "Checking if crossplane composition functions installed properly"
   @echo ""
   @kubectl -n crossplane-system logs -l app=crossplane

# setup kind cluster with UXP
setup_kind:
  #!/usr/bin/env bash
  echo "Creating kind cluster and Installing UXP"
  set -euo pipefail

  cluster="control-plane"

  echo "Creating kind cluster - ${cluster}"
  kind create cluster --config=kind-config.yaml --wait 3m 
  kind get kubeconfig --name "${cluster}"
  kubectl config use-context kind-"${cluster}"

  echo "Installing UXP"
  kubectl create namespace upbound-system
  helm install uxp --namespace upbound-system upbound-stable/universal-crossplane --devel
  kubectl wait --for condition=Available=True --timeout=300s deployment/crossplane --namespace upbound-system

# setup provider Kubernetes
setup_k8s:
  #!/usr/bin/env bash
  echo "Setting up provider kubernetes"
  set -euo pipefail

  kubectl apply -f {{yaml}}/kubernetes-provider.yaml
  kubectl wait --for condition=healthy --timeout=300s provider.pkg.crossplane.io/provider-kubernetes
  SA=$(kubectl -n upbound-system get sa -o name | grep provider-kubernetes | sed -e 's|serviceaccount\/|upbound-system:|g')
  kubectl create clusterrolebinding provider-kubernetes-admin-binding --clusterrole cluster-admin --serviceaccount="${SA}"
  kubectl apply -f {{yaml}}/kubernetes-provider-config.yaml

# setup provider Helm
setup_helm:
  #!/usr/bin/env bash
  echo "Setting up provider Helm"
  set -euo pipefail

  kubectl apply -f {{yaml}}/helm-provider.yaml
  kubectl wait --for condition=healthy --timeout=300s provider.pkg.crossplane.io/provider-helm
  SA=$(kubectl -n upbound-system get sa -o name | grep provider-helm | sed -e 's|serviceaccount\/|upbound-system:|g')
  kubectl create clusterrolebinding provider-helm-admin-binding --clusterrole cluster-admin --serviceaccount="${SA}"
  sleep 3
  kubectl apply -f {{yaml}}/helm-provider-config.yaml

# deploy monitoring stack
deploy_monitoring:
  @helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
  helm repo update
  @helm upgrade --install kube-prometheus-stack prometheus-community/kube-prometheus-stack -n prometheus \
   --set namespaceOverride=prometheus \
   --set grafana.namespaceOverride=prometheus \
   --set grafana.defaultDashboardsEnabled=true \
   --set kube-state-metrics.namespaceOverride=prometheus \
   --set prometheus-node-exporter.namespaceOverride=prometheus --create-namespace
  @kubectl -n prometheus patch prometheus kube-prometheus-stack-prometheus --type merge --patch '{"spec":{"enableAdminAPI":true}}'

# setup AWS official provider
setup_aws:
  @echo "Setting up AWS official provider"
  @kubectl delete secret -n upbound-system aws-creds --ignore-not-found
  @__swapcreds.sh
  @echo $base64encoded_aws_creds
  @kubectl config use-context kind-control-plane
  @envsubst < {{yaml}}/aws-provider.yaml | kubectl apply -f - 
  @kubectl wait --for condition=healthy --timeout=300s provider/provider-aws
  @envsubst < {{yaml}}/aws-provider-config.yaml | kubectl apply -f - 

# setup Azure official provider
setup_azure:
  @echo "Setting up Azure official provider"
  @kubectl config use-context kind-control-plane
  @envsubst < {{yaml}}/azure-provider.yaml | kubectl apply -f - 
  @kubectl wait --for condition=healthy --timeout=300s provider/provider-azure
  @envsubst < {{yaml}}/azure-provider-config.yaml | kubectl apply -f - 

# setup GCP official provider
setup_gcp:
  @echo "Setting up GCP official provider"
  @kubectl config use-context kind-control-plane
  @envsubst < {{yaml}}/gcp-provider.yaml | kubectl apply -f - 
  @kubectl wait --for condition=healthy --timeout=300s provider/provider-gcp
  @envsubst < {{yaml}}/gcp-provider-config.yaml | kubectl apply -f - 

# deploy a sample bucket to verify the setup
test_cluster:
  @echo "Test if cluster setup succesfull by depoloying a sample bucket"
  @envsubst < {{yaml}}/bucket.yaml | kubectl apply -f -

# delete GCP test bucket
delete_bucket:
  @echo "Delete sample bucket if present"
  @envsubst < {{yaml}}/bucket.yaml | kubectl delete --ignore-not-found -f - 

# * delete KIND cluster and clearnup cloud resources
teardown: 
  @echo "Delete KIND cluster"
  @kind delete clusters control-plane

# watch crossplane resources
watch RESOURCE='crossplane':
  watch kubectl get {{RESOURCE}}
